{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\wtmas\\\\Documents\\\\GitHub\\\\react-intro\\\\PizzaPal2\\\\frontend\\\\src\\\\containers\\\\YourAccount\\\\AccountUpdate\\\\AccountUpdate.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useContext } from \"react\";\nimport { Grid, Form, Header, Segment, Button } from \"semantic-ui-react\";\nimport axios from \"../../../axios-orders\";\nimport ErrorModal from \"../../../components/Feedback/ErrorModal/ErrorModal\";\nimport AuthContext from \"../../../context/auth-context\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst AccountUpdate = props => {\n  _s();\n\n  const auth = useContext(AuthContext);\n  const [accountState, setAccountState] = useState({\n    user: props.history.location.state.user\n  });\n  const [errorState, setErrorState] = useState({\n    error: false,\n    errorMessage: null\n  });\n  const [validationState, setValidationState] = useState({\n    rules: [{\n      id: \"form-input-name\",\n      message: \"Please enter your name (letters and spaces only, min length 2)\",\n      required: true,\n      valid: false\n    }, {\n      id: \"form-input-email\",\n      message: \"Please enter a valid email address (something@something.something)\",\n      required: true,\n      valid: false\n    }, {\n      id: \"form-input-password\",\n      message: \"Please enter a password (letters and numbers only, min length 6)\",\n      required: true,\n      valid: false\n    }],\n    formValid: false\n  });\n  const [messageState, setMessageState] = useState({\n    name: null,\n    email: null,\n    address: null\n  });\n\n  const validate = (value, inputIdentifier) => {\n    // copy the validation state\n    const validation = { ...validationState\n    }; // find the rule for this input\n\n    const inputRule = validation.rules.findIndex(input => input.id === inputIdentifier);\n    let message = null; // check if it is required and also empty\n\n    if (validation.rules[inputRule].required && value.trim() === \"\") {\n      // get the error message and set valid to false\n      message = validation.rules[inputRule].message;\n      validation.rules[inputRule].valid = false;\n    } else if (inputIdentifier === \"form-input-email\") {\n      //check for a valid email\n      let pattern = /^[^@\\s]+@[^@\\s]+\\.[^@\\s]+$/;\n      let validEmail = pattern.test(value);\n\n      if (validEmail) {\n        validation.rules[inputRule].valid = true;\n      } else {\n        validation.rules[inputRule].valid = false;\n        message = validation.rules[inputRule].message;\n      }\n    } else if (inputIdentifier === \"form-input-password\") {\n      //check for a valid password, letters and numbers only, 6 characters min\n      let pattern = /^[A-Za-z0-9\\s]{6,}$/;\n      let validPassword = pattern.test(value);\n\n      if (validPassword) {\n        validation.rules[inputRule].valid = true;\n      } else {\n        validation.rules[inputRule].valid = false;\n        message = validation.rules[inputRule].message;\n      }\n    } else if (validation.rules[inputRule].required && inputIdentifier === \"form-input-name\") {\n      //check for a valid name (letters and spaces only)\n      let pattern = /^[A-Za-z\\s]{2,30}$/;\n      let validName = pattern.test(value);\n\n      if (validName) {\n        validation.rules[inputRule].valid = true;\n      } else {\n        validation.rules[inputRule].valid = false;\n        message = validation.rules[inputRule].message;\n      }\n    } else {\n      // otherwise reset the message and set valid back to true\n      message = null;\n      validation.rules[inputRule].valid = true;\n    }\n\n    let msgState = { ...messageState\n    };\n\n    switch (inputIdentifier) {\n      case \"form-input-name\":\n        msgState.name = message;\n        break;\n\n      case \"form-input-email\":\n        msgState.email = message;\n        break;\n\n      case \"form-input-password\":\n        msgState.password = message;\n        break;\n\n      default: // code block\n\n    }\n\n    setMessageState({ ...msgState\n    }); // check if the whole form is valid\n\n    let formIsValid = true;\n\n    for (let i in validation.rules) {\n      if (!validation.rules[i].valid) {\n        formIsValid = false;\n      }\n    } // update state\n\n\n    setValidationState({\n      rules: validation.rules,\n      formValid: formIsValid\n    });\n  };\n\n  const formChangedHandler = (event, inputIdentifier) => {\n    let userDetails = accountState.user;\n\n    switch (inputIdentifier) {\n      case \"form-input-name\":\n        userDetails.name = event.target.value;\n        validate(event.target.value, inputIdentifier);\n        break;\n\n      case \"form-input-email\":\n        userDetails.email = event.target.value;\n        validate(event.target.value, inputIdentifier);\n        break;\n\n      case \"form-input-password\":\n        let password = event.target.value;\n        let trimmedPassword = password.trim();\n        userDetails.password = trimmedPassword;\n        validate(trimmedPassword, inputIdentifier);\n        break;\n\n      default: // code block\n\n    }\n\n    setAccountState({\n      user: userDetails\n    });\n  };\n\n  const updateHandler = () => {\n    let uid = auth.userId;\n    let path = \"/updateuser/\" + uid;\n    axios.put(path, accountState.user, {\n      headers: {\n        Authorization: \"Bearer \" + auth.token\n      }\n    }).then(response => {\n      props.history.push(\"/users/\" + auth.userId);\n    }).catch(error => {\n      let errorMsg = \"\";\n\n      if (error.response) {\n        errorMsg = error.response.data.message;\n      } else {\n        errorMsg = \"There was a problem updating your account\";\n      }\n\n      setErrorState({\n        error: true,\n        errorMessage: errorMsg\n      });\n    });\n  };\n\n  let disabled = !validationState.formValid;\n\n  const errorHandler = () => {\n    setErrorState({\n      error: false,\n      errorMessage: null\n    });\n  };\n\n  let updateForm = null;\n\n  if (errorState.error) {\n    updateForm = /*#__PURE__*/_jsxDEV(ErrorModal, {\n      error: errorState.errorMessage,\n      onClear: errorHandler\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 205,\n      columnNumber: 7\n    }, this);\n  } else {\n    updateForm = /*#__PURE__*/_jsxDEV(Grid, {\n      children: /*#__PURE__*/_jsxDEV(Grid.Row, {\n        centered: true,\n        children: /*#__PURE__*/_jsxDEV(Grid.Column, {\n          width: 10,\n          children: /*#__PURE__*/_jsxDEV(Segment, {\n            color: \"red\",\n            children: [/*#__PURE__*/_jsxDEV(Header, {\n              as: \"h2\",\n              textAlign: \"center\",\n              color: \"red\",\n              children: \"Update Your Details\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 213,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(Form, {\n              id: \"form\",\n              children: [/*#__PURE__*/_jsxDEV(Form.Input, {\n                error: messageState.email,\n                autoComplete: \"off\",\n                required: true,\n                label: \"Email\",\n                placeholder: \"Email e.g. username@mail.com\",\n                id: \"form-input-email\",\n                onChange: event => formChangedHandler(event, \"form-input-email\")\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 217,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(Form.Input, {\n                error: messageState.password,\n                type: \"password\",\n                autoComplete: \"off\",\n                required: true,\n                label: \"Password\",\n                placeholder: \"Password\",\n                id: \"form-input-password\",\n                onChange: event => formChangedHandler(event, \"form-input-password\")\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 228,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(Form.Input, {\n                error: messageState.name,\n                autoComplete: \"off\",\n                required: true,\n                label: \"Name\",\n                placeholder: \"Name\",\n                id: \"form-input-name\",\n                onChange: event => formChangedHandler(event, \"form-input-name\")\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 240,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(Button, {\n                type: \"submit\",\n                color: \"green\",\n                disabled: disabled,\n                onClick: updateHandler,\n                children: \"Update Details\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 251,\n                columnNumber: 17\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 216,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 212,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 211,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 210,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 209,\n      columnNumber: 7\n    }, this);\n  }\n\n  return /*#__PURE__*/_jsxDEV(React.Fragment, {\n    children: updateForm\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 267,\n    columnNumber: 10\n  }, this);\n};\n\n_s(AccountUpdate, \"gTq00zs/B8kalclgWFRo5c2t6n0=\");\n\n_c = AccountUpdate;\nexport default AccountUpdate;\n\nvar _c;\n\n$RefreshReg$(_c, \"AccountUpdate\");","map":{"version":3,"sources":["C:/Users/wtmas/Documents/GitHub/react-intro/PizzaPal2/frontend/src/containers/YourAccount/AccountUpdate/AccountUpdate.js"],"names":["React","useState","useContext","Grid","Form","Header","Segment","Button","axios","ErrorModal","AuthContext","AccountUpdate","props","auth","accountState","setAccountState","user","history","location","state","errorState","setErrorState","error","errorMessage","validationState","setValidationState","rules","id","message","required","valid","formValid","messageState","setMessageState","name","email","address","validate","value","inputIdentifier","validation","inputRule","findIndex","input","trim","pattern","validEmail","test","validPassword","validName","msgState","password","formIsValid","i","formChangedHandler","event","userDetails","target","trimmedPassword","updateHandler","uid","userId","path","put","headers","Authorization","token","then","response","push","catch","errorMsg","data","disabled","errorHandler","updateForm"],"mappings":"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","sourcesContent":["import React, { useState, useContext } from \"react\";\r\nimport { Grid, Form, Header, Segment, Button } from \"semantic-ui-react\";\r\nimport axios from \"../../../axios-orders\";\r\n\r\nimport ErrorModal from \"../../../components/Feedback/ErrorModal/ErrorModal\";\r\nimport AuthContext from \"../../../context/auth-context\";\r\n\r\nconst AccountUpdate = (props) => {\r\n\r\n  const auth = useContext(AuthContext);\r\n\r\n  const [accountState, setAccountState] = useState({\r\n    user: props.history.location.state.user,\r\n  });\r\n\r\n  const [errorState, setErrorState] = useState({\r\n    error: false,\r\n    errorMessage: null,\r\n  });\r\n\r\n  const [validationState, setValidationState] = useState({\r\n    rules: [\r\n      {\r\n        id: \"form-input-name\",\r\n        message:\r\n          \"Please enter your name (letters and spaces only, min length 2)\",\r\n        required: true,\r\n        valid: false,\r\n      },\r\n      {\r\n        id: \"form-input-email\",\r\n        message:\r\n          \"Please enter a valid email address (something@something.something)\",\r\n        required: true,\r\n        valid: false,\r\n      },\r\n      {\r\n        id: \"form-input-password\",\r\n        message:\r\n          \"Please enter a password (letters and numbers only, min length 6)\",\r\n        required: true,\r\n        valid: false,\r\n      },\r\n    ],\r\n    formValid: false,\r\n  });\r\n\r\n  const [messageState, setMessageState] = useState({\r\n    name: null,\r\n    email: null,\r\n    address: null,\r\n  });\r\n\r\n  const validate = (value, inputIdentifier) => {\r\n    // copy the validation state\r\n    const validation = { ...validationState };\r\n\r\n    // find the rule for this input\r\n    const inputRule = validation.rules.findIndex(\r\n      (input) => input.id === inputIdentifier\r\n    );\r\n\r\n    let message = null;\r\n\r\n    // check if it is required and also empty\r\n    if (validation.rules[inputRule].required && value.trim() === \"\") {\r\n      // get the error message and set valid to false\r\n      message = validation.rules[inputRule].message;\r\n      validation.rules[inputRule].valid = false;\r\n    } else if (inputIdentifier === \"form-input-email\") {\r\n      //check for a valid email\r\n\r\n      let pattern = /^[^@\\s]+@[^@\\s]+\\.[^@\\s]+$/;\r\n      let validEmail = pattern.test(value);\r\n\r\n      if (validEmail) {\r\n        validation.rules[inputRule].valid = true;\r\n      } else {\r\n        validation.rules[inputRule].valid = false;\r\n        message = validation.rules[inputRule].message;\r\n      }\r\n    } else if (inputIdentifier === \"form-input-password\") {\r\n      //check for a valid password, letters and numbers only, 6 characters min\r\n\r\n      let pattern = /^[A-Za-z0-9\\s]{6,}$/;\r\n      let validPassword = pattern.test(value);\r\n\r\n      if (validPassword) {\r\n        validation.rules[inputRule].valid = true;\r\n      } else {\r\n        validation.rules[inputRule].valid = false;\r\n        message = validation.rules[inputRule].message;\r\n      }\r\n    } else if (\r\n      validation.rules[inputRule].required &&\r\n      inputIdentifier === \"form-input-name\"\r\n    ) {\r\n      //check for a valid name (letters and spaces only)\r\n\r\n      let pattern = /^[A-Za-z\\s]{2,30}$/;\r\n      let validName = pattern.test(value);\r\n\r\n      if (validName) {\r\n        validation.rules[inputRule].valid = true;\r\n      } else {\r\n        validation.rules[inputRule].valid = false;\r\n        message = validation.rules[inputRule].message;\r\n      }\r\n    } else {\r\n      // otherwise reset the message and set valid back to true\r\n      message = null;\r\n      validation.rules[inputRule].valid = true;\r\n    }\r\n\r\n    let msgState = { ...messageState };\r\n\r\n    switch (inputIdentifier) {\r\n      case \"form-input-name\":\r\n        msgState.name = message;\r\n        break;\r\n      case \"form-input-email\":\r\n        msgState.email = message;\r\n        break;\r\n      case \"form-input-password\":\r\n        msgState.password = message;\r\n        break;\r\n      default:\r\n      // code block\r\n    }\r\n\r\n    setMessageState({ ...msgState });\r\n\r\n    // check if the whole form is valid\r\n    let formIsValid = true;\r\n\r\n    for (let i in validation.rules) {\r\n      if (!validation.rules[i].valid) {\r\n        formIsValid = false;\r\n      }\r\n    }\r\n\r\n    // update state\r\n    setValidationState({ rules: validation.rules, formValid: formIsValid });\r\n  };\r\n\r\n  const formChangedHandler = (event, inputIdentifier) => {\r\n    let userDetails = accountState.user;\r\n\r\n    switch (inputIdentifier) {\r\n      case \"form-input-name\":\r\n        userDetails.name = event.target.value;\r\n        validate(event.target.value, inputIdentifier);\r\n        break;\r\n      case \"form-input-email\":\r\n        userDetails.email = event.target.value;\r\n        validate(event.target.value, inputIdentifier);\r\n        break;\r\n      case \"form-input-password\":\r\n        let password = event.target.value;\r\n        let trimmedPassword = password.trim();\r\n        userDetails.password = trimmedPassword;\r\n        validate(trimmedPassword, inputIdentifier);\r\n        break;\r\n      default:\r\n      // code block\r\n    }\r\n\r\n    setAccountState({ user: userDetails });\r\n  };\r\n\r\n  const updateHandler = () => {\r\n    let uid = auth.userId;\r\n    let path = \"/updateuser/\" + uid;\r\n    axios\r\n      .put(path, accountState.user, {\r\n        headers: { Authorization: \"Bearer \" + auth.token },\r\n      })\r\n      .then((response) => {\r\n        props.history.push(\"/users/\" + auth.userId);\r\n      })\r\n      .catch((error) => {\r\n        let errorMsg = \"\";\r\n        if (error.response) {\r\n          errorMsg = error.response.data.message;\r\n        } else {\r\n          errorMsg = \"There was a problem updating your account\";\r\n        }\r\n        setErrorState({ error: true, errorMessage: errorMsg });\r\n      });\r\n  };\r\n\r\n  let disabled = !validationState.formValid;\r\n\r\n  const errorHandler = () => {\r\n    setErrorState({\r\n      error: false,\r\n      errorMessage: null,\r\n    });\r\n  };\r\n\r\n  let updateForm = null;\r\n\r\n  if (errorState.error) {\r\n    updateForm = (\r\n      <ErrorModal error={errorState.errorMessage} onClear={errorHandler} />\r\n    );\r\n  } else {\r\n    updateForm = (\r\n      <Grid>\r\n        <Grid.Row centered>\r\n          <Grid.Column width={10}>\r\n            <Segment color=\"red\">\r\n              <Header as=\"h2\" textAlign=\"center\" color=\"red\">\r\n                Update Your Details\r\n              </Header>\r\n              <Form id=\"form\">\r\n                <Form.Input\r\n                  error={messageState.email}\r\n                  autoComplete=\"off\"\r\n                  required\r\n                  label=\"Email\"\r\n                  placeholder=\"Email e.g. username@mail.com\"\r\n                  id=\"form-input-email\"\r\n                  onChange={(event) =>\r\n                    formChangedHandler(event, \"form-input-email\")\r\n                  }\r\n                />\r\n                <Form.Input\r\n                  error={messageState.password}\r\n                  type=\"password\"\r\n                  autoComplete=\"off\"\r\n                  required\r\n                  label=\"Password\"\r\n                  placeholder=\"Password\"\r\n                  id=\"form-input-password\"\r\n                  onChange={(event) =>\r\n                    formChangedHandler(event, \"form-input-password\")\r\n                  }\r\n                />\r\n                <Form.Input\r\n                  error={messageState.name}\r\n                  autoComplete=\"off\"\r\n                  required\r\n                  label=\"Name\"\r\n                  placeholder=\"Name\"\r\n                  id=\"form-input-name\"\r\n                  onChange={(event) =>\r\n                    formChangedHandler(event, \"form-input-name\")\r\n                  }\r\n                />\r\n                <Button\r\n                  type=\"submit\"\r\n                  color=\"green\"\r\n                  disabled={disabled}\r\n                  onClick={updateHandler}\r\n                >\r\n                  Update Details\r\n                </Button>\r\n              </Form>\r\n            </Segment>\r\n          </Grid.Column>\r\n        </Grid.Row>\r\n      </Grid>\r\n    );\r\n  }\r\n\r\n  return <React.Fragment>{updateForm}</React.Fragment>;\r\n};\r\n\r\nexport default AccountUpdate;\r\n"]},"metadata":{},"sourceType":"module"}