{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\wtmas\\\\Documents\\\\GitHub\\\\react-intro\\\\PizzaPal2\\\\frontend\\\\src\\\\containers\\\\PlaceOrder\\\\PlaceOrder.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useContext } from \"react\";\nimport { Grid, Form, Header, Segment, Select, Button } from \"semantic-ui-react\";\nimport { withRouter } from \"react-router-dom\";\nimport { v4 as uuidv4 } from \"uuid\";\nimport axios from \"../../axios-orders\";\nimport AuthContext from \"../../context/auth-context\";\nimport OrderSummary from \"../../components/Order/Checkout/OrderSummary/OrderSummary\";\nimport ErrorModal from \"../../components/Feedback/ErrorModal/ErrorModal\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst PlaceOrder = props => {\n  _s();\n\n  const auth = useContext(AuthContext); // CREATE STATES\n\n  const [orderState, setOrderState] = useState({\n    totalPrice: props.location.state.order.totalPrice,\n    chosenToppings: props.location.state.order.chosenToppings\n  });\n  const [errorState, setErrorState] = useState({\n    error: false,\n    errorMessage: null\n  });\n  const [customerState, setCustomerState] = useState({\n    details: {\n      name: \"\",\n      phone: \"\",\n      method: \"\",\n      address: \"\"\n    }\n  });\n  const [validationState, setValidationState] = useState({\n    rules: [{\n      id: \"form-input-name\",\n      message: \"Please enter your name (letters and spaces only, min length 2)\",\n      required: true,\n      valid: false\n    }, {\n      id: \"form-input-phone\",\n      message: \"Please enter your phone number (area code and number)\",\n      required: true,\n      valid: false\n    }, {\n      id: \"form-input-method\",\n      message: \"Please choose collection or delivery\",\n      required: true,\n      valid: false\n    }, {\n      id: \"form-input-address\",\n      message: \"Please enter your delivery address (house number and street)\",\n      required: false,\n      valid: true\n    }],\n    formValid: false\n  });\n  const [messageState, setMessageState] = useState({\n    name: null,\n    phone: null,\n    method: null,\n    address: null\n  }); // CANCEL (GO BACK) HANDLER\n\n  const cancelHandler = () => {\n    props.history.push({\n      pathname: \"/\",\n      state: {\n        order: orderState\n      }\n    });\n  }; // VALIDATE FUNCTION\n\n\n  const validate = (value, inputIdentifier, inputType) => {\n    // copy the validation state\n    const validation = { ...validationState\n    }; // find the rule for this input\n\n    const inputRule = validation.rules.findIndex(input => input.id === inputIdentifier);\n    let message = null; // check if it is required and also empty (for inputs only)\n\n    if (validation.rules[inputRule].required && inputType === \"input\" && value.trim() === \"\") {\n      // get the error message and set valid to false\n      message = validation.rules[inputRule].message;\n      validation.rules[inputRule].valid = false;\n    } else if (inputIdentifier === \"form-input-phone\") {\n      //check for a valid phone number\n      let pattern = /^[+]?[(]?[0-9]{3,5}[)]?[-\\s.]?[0-9]{6,7}$/;\n      let validNum = pattern.test(value);\n\n      if (validNum) {\n        validation.rules[inputRule].valid = true;\n      } else {\n        validation.rules[inputRule].valid = false;\n        message = validation.rules[inputRule].message;\n      }\n    } else if (inputIdentifier === \"form-input-name\") {\n      //check for a valid name (letters and spaces only)\n      let pattern = /^[A-Za-z\\s]{2,30}$/;\n      let validName = pattern.test(value);\n\n      if (validName) {\n        validation.rules[inputRule].valid = true;\n      } else {\n        validation.rules[inputRule].valid = false;\n        message = validation.rules[inputRule].message;\n      }\n    } else if (value === \"Delivery\") {\n      //set address to required\n      validation.rules[inputRule].valid = true;\n      validation.rules[3].valid = false;\n      validation.rules[3].required = true;\n    } else if (value === \"Collection\") {\n      //set address to not required\n      validation.rules[inputRule].valid = true;\n      validation.rules[3].required = false;\n      validation.rules[3].valid = true;\n    } else if (validation.rules[inputRule].required && inputIdentifier === \"form-input-address\") {\n      //check for a valid address (alphanumeric plus some special characters)\n      let pattern = /^[#.0-9a-zA-Z\\s,-]{2,50}$/;\n      let validAddress = pattern.test(value);\n\n      if (validAddress) {\n        validation.rules[inputRule].valid = true;\n      } else {\n        validation.rules[inputRule].valid = false;\n        message = validation.rules[inputRule].message;\n      }\n    } else {\n      // otherwise reset the message and set valid back to true\n      message = null;\n      validation.rules[inputRule].valid = true;\n    }\n\n    let msgState = { ...messageState\n    };\n\n    switch (inputIdentifier) {\n      case \"form-input-name\":\n        msgState.name = message;\n        break;\n\n      case \"form-input-phone\":\n        msgState.phone = message;\n        break;\n\n      case \"form-input-method\":\n        msgState.method = message;\n        break;\n\n      case \"form-input-address\":\n        msgState.address = message;\n        break;\n\n      default: // code block\n\n    }\n\n    setMessageState({ ...msgState\n    }); // check if the whole form is valid\n\n    let formIsValid = true;\n\n    for (let i in validation.rules) {\n      if (!validation.rules[i].valid) {\n        formIsValid = false;\n      }\n    } // update state\n\n\n    setValidationState({\n      rules: validation.rules,\n      formValid: formIsValid\n    });\n  }; // FORM CHANGED HANDLER\n\n\n  const formChangedHandler = (event, inputIdentifier, inputType) => {\n    let customerDetails = customerState.details;\n\n    switch (inputIdentifier) {\n      case \"form-input-name\":\n        customerDetails.name = event.target.value;\n        validate(event.target.value, inputIdentifier, inputType);\n        break;\n\n      case \"form-input-phone\":\n        customerDetails.phone = event.target.value;\n        validate(event.target.value, inputIdentifier, inputType);\n        break;\n\n      case \"form-input-method\":\n        customerDetails.method = event.target.textContent;\n        validate(event.target.textContent, inputIdentifier, inputType);\n        break;\n\n      case \"form-input-address\":\n        customerDetails.address = event.target.value;\n        validate(event.target.value, inputIdentifier, inputType);\n        break;\n\n      default: // code block\n\n    }\n\n    setCustomerState({\n      details: customerDetails\n    });\n  }; // DISABLE/ENABLE FORM SUBMIT BUTTON\n\n\n  let disabled = !validationState.formValid; // CHECKOUT HANDLER\n\n  const checkoutHandler = () => {\n    // get order from orderState\n    let order = orderState; // add unique id\n\n    order.id = uuidv4(); // create formatted date\n\n    let orderDate = new Date();\n    const months = [\"Jan\", \"Feb\", \"Mar\", \"Apr\", \"May\", \"Jun\", \"Jul\", \"Aug\", \"Sep\", \"Oct\", \"Nov\", \"Dec\"];\n    const days = [\"Sun\", \"Mon\", \"Tue\", \"Wed\", \"Thu\", \"Fri\", \"Sat\"];\n    let dayNum = orderDate.getDay();\n    let day = days[dayNum];\n    let monthNum = orderDate.getMonth();\n    let month = months[monthNum];\n    let date = orderDate.getDate();\n    let year = orderDate.getFullYear(); // saves date in the format \"Fri 19 Mar 2021\"\n\n    let formattedDate = day + \" \" + date + \" \" + month + \" \" + year; // add formattedDate to order\n\n    order.date = formattedDate; // add customer details to order\n\n    order.details = customerState.details;\n    order.userId = auth.userId;\n    axios.post(\"/checkout\", order, {\n      headers: {\n        Authorization: \"Bearer \" + auth.token\n      }\n    }).then(response => {\n      props.history.push(\"/order-success\");\n    }).catch(error => {\n      let errorMsg = \"\";\n\n      if (error.response) {\n        errorMsg = error.response.data.message;\n      } else {\n        errorMsg = \"There was a problem creating your order\";\n      }\n\n      setErrorState({\n        error: true,\n        errorMessage: errorMsg\n      });\n    });\n  }; // ERROR HANDLER\n\n\n  const errorHandler = () => {\n    setErrorState({\n      error: false,\n      errorMessage: null\n    });\n  }; // DISPLAY ERROR MODAL\n\n\n  let orderForm = null;\n\n  if (errorState.error) {\n    orderForm = /*#__PURE__*/_jsxDEV(ErrorModal, {\n      error: errorState.errorMessage,\n      onClear: errorHandler\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 306,\n      columnNumber: 7\n    }, this);\n  } else {\n    orderForm = /*#__PURE__*/_jsxDEV(Grid, {\n      children: /*#__PURE__*/_jsxDEV(Grid.Row, {\n        columns: 2,\n        children: [/*#__PURE__*/_jsxDEV(Grid.Column, {\n          width: 6,\n          children: /*#__PURE__*/_jsxDEV(Segment, {\n            color: \"red\",\n            children: [/*#__PURE__*/_jsxDEV(Header, {\n              as: \"h2\",\n              textAlign: \"center\",\n              color: \"red\",\n              children: \"Confirm your order:\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 314,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(OrderSummary, {\n              menu: props.location.state.menu,\n              toppings: props.location.state.order.chosenToppings,\n              price: props.location.state.order.totalPrice\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 317,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(Button, {\n              color: \"red\",\n              onClick: cancelHandler,\n              children: \"Go Back\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 322,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 313,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 312,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Grid.Column, {\n          width: 10,\n          children: /*#__PURE__*/_jsxDEV(Segment, {\n            color: \"red\",\n            children: [/*#__PURE__*/_jsxDEV(Header, {\n              as: \"h2\",\n              textAlign: \"center\",\n              color: \"red\",\n              children: \"Enter your details:\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 330,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(Form, {\n              id: \"form\",\n              children: [/*#__PURE__*/_jsxDEV(Form.Input, {\n                error: messageState.name,\n                required: true,\n                label: \"Name\",\n                placeholder: \"Name\",\n                id: \"form-input-name\",\n                onChange: event => formChangedHandler(event, \"form-input-name\", \"input\")\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 334,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(Form.Input, {\n                error: messageState.phone,\n                required: true,\n                label: \"Phone\",\n                placeholder: \"Phone e.g. 086-1234567\",\n                id: \"form-input-phone\",\n                onChange: event => formChangedHandler(event, \"form-input-phone\", \"input\")\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 344,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(Form.Field, {\n                control: Select,\n                required: true,\n                error: messageState.method,\n                label: \"Delivery method\",\n                options: [{\n                  key: \"c\",\n                  text: \"Collection\",\n                  value: \"collection\"\n                }, {\n                  key: \"d\",\n                  text: \"Delivery\",\n                  value: \"delivery\"\n                }],\n                placeholder: \"Collection or Delivery\",\n                id: \"form-input-method\",\n                onChange: event => formChangedHandler(event, \"form-input-method\", \"select\")\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 354,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(Form.Input, {\n                error: messageState.address,\n                required: validationState.rules[3].required,\n                fluid: true,\n                label: \"Address\",\n                placeholder: \"Address\",\n                id: \"form-input-address\",\n                onChange: event => formChangedHandler(event, \"form-input-address\", \"input\")\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 369,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(Button, {\n                type: \"submit\",\n                color: \"green\",\n                disabled: disabled,\n                onClick: checkoutHandler,\n                children: \"Submit\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 380,\n                columnNumber: 17\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 333,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 329,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 328,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 311,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 310,\n      columnNumber: 7\n    }, this);\n  } // DISPLAY ORDER SUMMARY AND FORM\n\n\n  return /*#__PURE__*/_jsxDEV(React.Fragment, {\n    children: orderForm\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 398,\n    columnNumber: 10\n  }, this);\n};\n\n_s(PlaceOrder, \"u2502m+q4OIsRcCL1KKED8Qx5D4=\");\n\n_c = PlaceOrder;\nexport default _c2 = withRouter(PlaceOrder);\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"PlaceOrder\");\n$RefreshReg$(_c2, \"%default%\");","map":{"version":3,"sources":["C:/Users/wtmas/Documents/GitHub/react-intro/PizzaPal2/frontend/src/containers/PlaceOrder/PlaceOrder.js"],"names":["React","useState","useContext","Grid","Form","Header","Segment","Select","Button","withRouter","v4","uuidv4","axios","AuthContext","OrderSummary","ErrorModal","PlaceOrder","props","auth","orderState","setOrderState","totalPrice","location","state","order","chosenToppings","errorState","setErrorState","error","errorMessage","customerState","setCustomerState","details","name","phone","method","address","validationState","setValidationState","rules","id","message","required","valid","formValid","messageState","setMessageState","cancelHandler","history","push","pathname","validate","value","inputIdentifier","inputType","validation","inputRule","findIndex","input","trim","pattern","validNum","test","validName","validAddress","msgState","formIsValid","i","formChangedHandler","event","customerDetails","target","textContent","disabled","checkoutHandler","orderDate","Date","months","days","dayNum","getDay","day","monthNum","getMonth","month","date","getDate","year","getFullYear","formattedDate","userId","post","headers","Authorization","token","then","response","catch","errorMsg","data","errorHandler","orderForm","menu","key","text"],"mappings":"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","sourcesContent":["import React, { useState, useContext } from \"react\";\r\nimport { Grid, Form, Header, Segment, Select, Button } from \"semantic-ui-react\";\r\nimport { withRouter } from \"react-router-dom\";\r\nimport { v4 as uuidv4 } from \"uuid\";\r\nimport axios from \"../../axios-orders\";\r\nimport AuthContext from \"../../context/auth-context\";\r\n\r\nimport OrderSummary from \"../../components/Order/Checkout/OrderSummary/OrderSummary\";\r\nimport ErrorModal from \"../../components/Feedback/ErrorModal/ErrorModal\";\r\n\r\nconst PlaceOrder = (props) => {\r\n\r\n  const auth = useContext(AuthContext);\r\n\r\n  // CREATE STATES\r\n  const [orderState, setOrderState] = useState({\r\n    totalPrice: props.location.state.order.totalPrice,\r\n    chosenToppings: props.location.state.order.chosenToppings,\r\n  });\r\n\r\n  const [errorState, setErrorState] = useState({\r\n    error: false,\r\n    errorMessage: null,\r\n  });\r\n\r\n  const [customerState, setCustomerState] = useState({\r\n    details: {\r\n      name: \"\",\r\n      phone: \"\",\r\n      method: \"\",\r\n      address: \"\",\r\n    },\r\n  });\r\n\r\n  const [validationState, setValidationState] = useState({\r\n    rules: [\r\n      {\r\n        id: \"form-input-name\",\r\n        message:\r\n          \"Please enter your name (letters and spaces only, min length 2)\",\r\n        required: true,\r\n        valid: false,\r\n      },\r\n      {\r\n        id: \"form-input-phone\",\r\n        message: \"Please enter your phone number (area code and number)\",\r\n        required: true,\r\n        valid: false,\r\n      },\r\n      {\r\n        id: \"form-input-method\",\r\n        message: \"Please choose collection or delivery\",\r\n        required: true,\r\n        valid: false,\r\n      },\r\n      {\r\n        id: \"form-input-address\",\r\n        message: \"Please enter your delivery address (house number and street)\",\r\n        required: false,\r\n        valid: true,\r\n      },\r\n    ],\r\n    formValid: false,\r\n  });\r\n\r\n  const [messageState, setMessageState] = useState({\r\n    name: null,\r\n    phone: null,\r\n    method: null,\r\n    address: null,\r\n  });\r\n\r\n  // CANCEL (GO BACK) HANDLER\r\n  const cancelHandler = () => {\r\n    props.history.push({\r\n      pathname: \"/\",\r\n      state: {\r\n        order: orderState,\r\n      },\r\n    });\r\n  };\r\n\r\n  // VALIDATE FUNCTION\r\n  const validate = (value, inputIdentifier, inputType) => {\r\n    // copy the validation state\r\n    const validation = { ...validationState };\r\n\r\n    // find the rule for this input\r\n    const inputRule = validation.rules.findIndex(\r\n      (input) => input.id === inputIdentifier\r\n    );\r\n\r\n    let message = null;\r\n\r\n    // check if it is required and also empty (for inputs only)\r\n    if (\r\n      validation.rules[inputRule].required &&\r\n      inputType === \"input\" &&\r\n      value.trim() === \"\"\r\n    ) {\r\n      // get the error message and set valid to false\r\n      message = validation.rules[inputRule].message;\r\n      validation.rules[inputRule].valid = false;\r\n    } else if (inputIdentifier === \"form-input-phone\") {\r\n      //check for a valid phone number\r\n\r\n      let pattern = /^[+]?[(]?[0-9]{3,5}[)]?[-\\s.]?[0-9]{6,7}$/;\r\n      let validNum = pattern.test(value);\r\n\r\n      if (validNum) {\r\n        validation.rules[inputRule].valid = true;\r\n      } else {\r\n        validation.rules[inputRule].valid = false;\r\n        message = validation.rules[inputRule].message;\r\n      }\r\n    } else if (inputIdentifier === \"form-input-name\") {\r\n      //check for a valid name (letters and spaces only)\r\n\r\n      let pattern = /^[A-Za-z\\s]{2,30}$/;\r\n      let validName = pattern.test(value);\r\n\r\n      if (validName) {\r\n        validation.rules[inputRule].valid = true;\r\n      } else {\r\n        validation.rules[inputRule].valid = false;\r\n        message = validation.rules[inputRule].message;\r\n      }\r\n    } else if (value === \"Delivery\") {\r\n      //set address to required\r\n      validation.rules[inputRule].valid = true;\r\n      validation.rules[3].valid = false;\r\n      validation.rules[3].required = true;\r\n    } else if (value === \"Collection\") {\r\n      //set address to not required\r\n      validation.rules[inputRule].valid = true;\r\n      validation.rules[3].required = false;\r\n      validation.rules[3].valid = true;\r\n    } else if (\r\n      validation.rules[inputRule].required &&\r\n      inputIdentifier === \"form-input-address\"\r\n    ) {\r\n      //check for a valid address (alphanumeric plus some special characters)\r\n\r\n      let pattern = /^[#.0-9a-zA-Z\\s,-]{2,50}$/;\r\n      let validAddress = pattern.test(value);\r\n\r\n      if (validAddress) {\r\n        validation.rules[inputRule].valid = true;\r\n      } else {\r\n        validation.rules[inputRule].valid = false;\r\n        message = validation.rules[inputRule].message;\r\n      }\r\n    } else {\r\n      // otherwise reset the message and set valid back to true\r\n      message = null;\r\n      validation.rules[inputRule].valid = true;\r\n    }\r\n\r\n    let msgState = { ...messageState };\r\n\r\n    switch (inputIdentifier) {\r\n      case \"form-input-name\":\r\n        msgState.name = message;\r\n        break;\r\n      case \"form-input-phone\":\r\n        msgState.phone = message;\r\n        break;\r\n      case \"form-input-method\":\r\n        msgState.method = message;\r\n        break;\r\n      case \"form-input-address\":\r\n        msgState.address = message;\r\n        break;\r\n      default:\r\n      // code block\r\n    }\r\n\r\n    setMessageState({ ...msgState });\r\n\r\n    // check if the whole form is valid\r\n    let formIsValid = true;\r\n\r\n    for (let i in validation.rules) {\r\n      if (!validation.rules[i].valid) {\r\n        formIsValid = false;\r\n      }\r\n    }\r\n\r\n    // update state\r\n    setValidationState({ rules: validation.rules, formValid: formIsValid });\r\n  };\r\n\r\n  // FORM CHANGED HANDLER\r\n  const formChangedHandler = (event, inputIdentifier, inputType) => {\r\n    let customerDetails = customerState.details;\r\n\r\n    switch (inputIdentifier) {\r\n      case \"form-input-name\":\r\n        customerDetails.name = event.target.value;\r\n        validate(event.target.value, inputIdentifier, inputType);\r\n        break;\r\n      case \"form-input-phone\":\r\n        customerDetails.phone = event.target.value;\r\n        validate(event.target.value, inputIdentifier, inputType);\r\n        break;\r\n      case \"form-input-method\":\r\n        customerDetails.method = event.target.textContent;\r\n        validate(event.target.textContent, inputIdentifier, inputType);\r\n        break;\r\n      case \"form-input-address\":\r\n        customerDetails.address = event.target.value;\r\n        validate(event.target.value, inputIdentifier, inputType);\r\n        break;\r\n      default:\r\n      // code block\r\n    }\r\n\r\n    setCustomerState({ details: customerDetails });\r\n  };\r\n\r\n  // DISABLE/ENABLE FORM SUBMIT BUTTON\r\n\r\n  let disabled = !validationState.formValid;\r\n\r\n  // CHECKOUT HANDLER\r\n\r\n  const checkoutHandler = () => {\r\n    // get order from orderState\r\n    let order = orderState;\r\n\r\n    // add unique id\r\n    order.id = uuidv4();\r\n\r\n    // create formatted date\r\n    let orderDate = new Date();\r\n\r\n    const months = [\r\n      \"Jan\",\r\n      \"Feb\",\r\n      \"Mar\",\r\n      \"Apr\",\r\n      \"May\",\r\n      \"Jun\",\r\n      \"Jul\",\r\n      \"Aug\",\r\n      \"Sep\",\r\n      \"Oct\",\r\n      \"Nov\",\r\n      \"Dec\",\r\n    ];\r\n    const days = [\"Sun\", \"Mon\", \"Tue\", \"Wed\", \"Thu\", \"Fri\", \"Sat\"];\r\n\r\n    let dayNum = orderDate.getDay();\r\n    let day = days[dayNum];\r\n\r\n    let monthNum = orderDate.getMonth();\r\n    let month = months[monthNum];\r\n\r\n    let date = orderDate.getDate();\r\n    let year = orderDate.getFullYear();\r\n\r\n    // saves date in the format \"Fri 19 Mar 2021\"\r\n    let formattedDate = day + \" \" + date + \" \" + month + \" \" + year;\r\n\r\n    // add formattedDate to order\r\n    order.date = formattedDate;\r\n\r\n    // add customer details to order\r\n    order.details = customerState.details;\r\n\r\n    order.userId = auth.userId;\r\n\r\n    axios\r\n      .post(\"/checkout\", order,{\r\n        headers: { Authorization: \"Bearer \" + auth.token}\r\n      })\r\n      .then((response) => {\r\n        props.history.push(\"/order-success\");\r\n      })\r\n      .catch((error) => {\r\n        let errorMsg = \"\";\r\n        if (error.response) {\r\n          errorMsg = error.response.data.message;\r\n        } else {\r\n          errorMsg = \"There was a problem creating your order\";\r\n        }\r\n        setErrorState({ error: true, errorMessage: errorMsg });\r\n      });\r\n  };\r\n\r\n  // ERROR HANDLER\r\n\r\n  const errorHandler = () => {\r\n    setErrorState({\r\n      error: false,\r\n      errorMessage: null,\r\n    });\r\n  };\r\n\r\n  // DISPLAY ERROR MODAL\r\n\r\n  let orderForm = null;\r\n\r\n  if (errorState.error) {\r\n    orderForm = (\r\n      <ErrorModal error={errorState.errorMessage} onClear={errorHandler} />\r\n    );\r\n  } else {\r\n    orderForm = (\r\n      <Grid>\r\n        <Grid.Row columns={2}>\r\n          <Grid.Column width={6}>\r\n            <Segment color=\"red\">\r\n              <Header as=\"h2\" textAlign=\"center\" color=\"red\">\r\n                Confirm your order:\r\n              </Header>\r\n              <OrderSummary\r\n                menu={props.location.state.menu}\r\n                toppings={props.location.state.order.chosenToppings}\r\n                price={props.location.state.order.totalPrice}\r\n              />\r\n              <Button color=\"red\" onClick={cancelHandler}>\r\n                Go Back\r\n              </Button>\r\n            </Segment>\r\n          </Grid.Column>\r\n\r\n          <Grid.Column width={10}>\r\n            <Segment color=\"red\">\r\n              <Header as=\"h2\" textAlign=\"center\" color=\"red\">\r\n                Enter your details:\r\n              </Header>\r\n              <Form id=\"form\">\r\n                <Form.Input\r\n                  error={messageState.name}\r\n                  required\r\n                  label=\"Name\"\r\n                  placeholder=\"Name\"\r\n                  id=\"form-input-name\"\r\n                  onChange={(event) =>\r\n                    formChangedHandler(event, \"form-input-name\", \"input\")\r\n                  }\r\n                />\r\n                <Form.Input\r\n                  error={messageState.phone}\r\n                  required\r\n                  label=\"Phone\"\r\n                  placeholder=\"Phone e.g. 086-1234567\"\r\n                  id=\"form-input-phone\"\r\n                  onChange={(event) =>\r\n                    formChangedHandler(event, \"form-input-phone\", \"input\")\r\n                  }\r\n                />\r\n                <Form.Field\r\n                  control={Select}\r\n                  required\r\n                  error={messageState.method}\r\n                  label=\"Delivery method\"\r\n                  options={[\r\n                    { key: \"c\", text: \"Collection\", value: \"collection\" },\r\n                    { key: \"d\", text: \"Delivery\", value: \"delivery\" },\r\n                  ]}\r\n                  placeholder=\"Collection or Delivery\"\r\n                  id=\"form-input-method\"\r\n                  onChange={(event) =>\r\n                    formChangedHandler(event, \"form-input-method\", \"select\")\r\n                  }\r\n                />\r\n                <Form.Input\r\n                  error={messageState.address}\r\n                  required={validationState.rules[3].required}\r\n                  fluid\r\n                  label=\"Address\"\r\n                  placeholder=\"Address\"\r\n                  id=\"form-input-address\"\r\n                  onChange={(event) =>\r\n                    formChangedHandler(event, \"form-input-address\", \"input\")\r\n                  }\r\n                />\r\n                <Button\r\n                  type=\"submit\"\r\n                  color=\"green\"\r\n                  disabled={disabled}\r\n                  onClick={checkoutHandler}\r\n                >\r\n                  Submit\r\n                </Button>\r\n              </Form>\r\n            </Segment>\r\n          </Grid.Column>\r\n        </Grid.Row>\r\n      </Grid>\r\n    );\r\n  }\r\n\r\n  // DISPLAY ORDER SUMMARY AND FORM\r\n\r\n  return <React.Fragment>{orderForm}</React.Fragment>;\r\n};\r\n\r\nexport default withRouter(PlaceOrder);\r\n"]},"metadata":{},"sourceType":"module"}