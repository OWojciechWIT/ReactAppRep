{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\wtmas\\\\Documents\\\\GitHub\\\\react-intro\\\\PizzaPal2\\\\frontend\\\\src\\\\containers\\\\PizzaPal\\\\PizzaPal.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from \"react\";\nimport { Grid } from \"semantic-ui-react\";\nimport axios from \"../../axios-orders\";\nimport Menu from \"../../components/Menu/Menu\";\nimport Order from \"../../components/Order/Order\";\nimport Loader from \"../../components/Feedback/Loader/Loader\";\nimport ErrorModal from \"../../components/Feedback/ErrorModal/ErrorModal\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst PizzaPal = props => {\n  _s();\n\n  // MENU, ERROR AND LOADING STATE AND GET TOPPINGS FROM FIREBASE\n  const [menuState, setMenuState] = useState({\n    toppings: []\n  });\n  const [errorState, setErrorState] = useState({\n    error: false,\n    errorMessage: null\n  });\n  const [loadingState, setLoadingState] = useState({\n    isLoading: true,\n    loadFailed: false\n  });\n  useEffect(() => {\n    axios.get(\"/\").then(response => {\n      let sortedToppings = response.data.toppings.sort(function (a, b) {\n        return a.id - b.id;\n      });\n      setMenuState({\n        toppings: sortedToppings\n      });\n    }).catch(error => {\n      setErrorState({\n        error: true,\n        errorMessage: error.response.data.message\n      });\n      setLoadingState({\n        isLoading: false,\n        loadFailed: menuState.loadFailed\n      });\n      console.log(error.response);\n    });\n  }, []); // ORDER STATE\n  // Set order state conditionally - either to old order state or starting state\n\n  const [orderState, setOrderState] = useState({\n    totalPrice: props.location.state ? props.location.state.order.totalPrice : 5,\n    chosenToppings: props.location.state ? props.location.state.order.chosenToppings : []\n  }); // EVENT HANDLERS - ADD TOPPING\n\n  const addToppingHandler = id => {\n    let order = { ...orderState\n    }; // find the chosen topping in the menu\n\n    const menuIndex = menuState.toppings.findIndex(topping => topping.id === id); // check if the topping has already been added to the orderToppings array\n\n    const orderIndex = order.chosenToppings.findIndex(topping => topping.id === id); // if so, increase its count by 1\n\n    if (orderIndex > -1) {\n      order.chosenToppings[orderIndex].count++;\n    } // otherwise (i.e. this topping is being added for the first time)\n    // create this topping and add it to the order toppings array\n    else {\n        // Save the id, name and price of the chosen topping; set its count to 1\n        const chosenTopping = {\n          id: menuState.toppings[menuIndex].id,\n          name: menuState.toppings[menuIndex].alt,\n          price: menuState.toppings[menuIndex].price,\n          count: 1\n        };\n        order.chosenToppings.push(chosenTopping);\n      } // Calculate the new price\n\n\n    const newPrice = orderState.totalPrice + menuState.toppings[menuIndex].price; // Update the order state with the new price and updated toppings array\n\n    setOrderState({\n      totalPrice: newPrice,\n      chosenToppings: order.chosenToppings\n    });\n  }; // EVENT HANDLERS - REMOVE TOPPING\n\n\n  const removeToppingHandler = id => {\n    let order = { ...orderState\n    }; // Find topping with matching id from the orderToppings\n\n    const index = order.chosenToppings.findIndex(topping => topping.id === id); // Get the current price\n\n    let price = order.totalPrice; // If topping was found, update the price and decrease the count\n\n    if (index >= 0) {\n      price = price - order.chosenToppings[index].price;\n      order.chosenToppings[index].count--; // If the count is now 0, remove the topping completely\n\n      if (order.chosenToppings[index].count < 1) {\n        order.chosenToppings.splice(index, 1);\n      }\n    } // Update order state with updated price and updated toppings array\n\n\n    setOrderState({\n      totalPrice: price,\n      chosenToppings: order.chosenToppings\n    });\n  }; // EVENT HANDLERS - CHECK OUT\n\n\n  const checkoutHandler = () => {\n    props.history.push({\n      pathname: \"place-order\",\n      state: {\n        order: orderState,\n        menu: menuState.toppings\n      }\n    });\n  }; // ERROR HANDLER\n\n\n  const errorHandler = () => {\n    setErrorState({\n      error: false,\n      errorMessage: null\n    });\n    setLoadingState({\n      isLoading: false,\n      loadFailed: true\n    });\n  }; // DISABLE CHECKOUT BUTTON IF NO TOPPINGS CHOSEN\n\n\n  let checkoutDisabled = true;\n\n  if (orderState.chosenToppings.length > 0) {\n    checkoutDisabled = false;\n  } // DISPLAY PIZZA PAL MENU AND CONTROLS\n\n\n  let pizzapalMenu = errorState.error ? /*#__PURE__*/_jsxDEV(ErrorModal, {\n    error: errorState.errorMessage,\n    onClear: errorHandler\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 169,\n    columnNumber: 5\n  }, this) : /*#__PURE__*/_jsxDEV(Loader, {\n    active: loadingState.isLoading\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 171,\n    columnNumber: 5\n  }, this);\n\n  if (menuState.toppings.length > 0) {\n    pizzapalMenu = /*#__PURE__*/_jsxDEV(Grid, {\n      divided: \"vertically\",\n      stackable: true,\n      children: [/*#__PURE__*/_jsxDEV(Grid.Row, {\n        centered: true,\n        children: /*#__PURE__*/_jsxDEV(Menu, {\n          menu: menuState.toppings\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 178,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 177,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Order, {\n        menu: menuState.toppings,\n        toppingAdded: addToppingHandler,\n        toppingRemoved: removeToppingHandler,\n        chosenToppings: orderState.chosenToppings,\n        totalPrice: orderState.totalPrice,\n        checkout: checkoutHandler,\n        disabled: checkoutDisabled\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 180,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 176,\n      columnNumber: 7\n    }, this);\n  } else if (loadingState.loadFailed) {\n    pizzapalMenu = /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"We're having some issues loading the menu... Please try again later.\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 193,\n      columnNumber: 7\n    }, this);\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: pizzapalMenu\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 199,\n    columnNumber: 10\n  }, this);\n};\n\n_s(PizzaPal, \"AQO/+plXm8O90zXFwZF3p8enBzE=\");\n\n_c = PizzaPal;\nexport default PizzaPal;\n\nvar _c;\n\n$RefreshReg$(_c, \"PizzaPal\");","map":{"version":3,"sources":["C:/Users/wtmas/Documents/GitHub/react-intro/PizzaPal2/frontend/src/containers/PizzaPal/PizzaPal.js"],"names":["React","useState","useEffect","Grid","axios","Menu","Order","Loader","ErrorModal","PizzaPal","props","menuState","setMenuState","toppings","errorState","setErrorState","error","errorMessage","loadingState","setLoadingState","isLoading","loadFailed","get","then","response","sortedToppings","data","sort","a","b","id","catch","message","console","log","orderState","setOrderState","totalPrice","location","state","order","chosenToppings","addToppingHandler","menuIndex","findIndex","topping","orderIndex","count","chosenTopping","name","alt","price","push","newPrice","removeToppingHandler","index","splice","checkoutHandler","history","pathname","menu","errorHandler","checkoutDisabled","length","pizzapalMenu"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from \"react\";\r\nimport { Grid } from \"semantic-ui-react\";\r\nimport axios from \"../../axios-orders\";\r\n\r\nimport Menu from \"../../components/Menu/Menu\";\r\nimport Order from \"../../components/Order/Order\";\r\nimport Loader from \"../../components/Feedback/Loader/Loader\";\r\nimport ErrorModal from \"../../components/Feedback/ErrorModal/ErrorModal\";\r\n\r\nconst PizzaPal = (props) => {\r\n\r\n  // MENU, ERROR AND LOADING STATE AND GET TOPPINGS FROM FIREBASE\r\n  const [menuState, setMenuState] = useState({\r\n    toppings: [],\r\n  });\r\n\r\n  const [errorState, setErrorState] = useState({\r\n    error: false,\r\n    errorMessage: null,\r\n  });\r\n\r\n  const [loadingState, setLoadingState] = useState({\r\n    isLoading: true,\r\n    loadFailed: false,\r\n  });\r\n\r\n  useEffect(() => {\r\n    axios\r\n      .get(\"/\")\r\n      .then((response) => {\r\n        let sortedToppings = response.data.toppings.sort(function (a, b) {\r\n          return a.id - b.id;\r\n        });\r\n        setMenuState({ toppings: sortedToppings });\r\n      })\r\n      .catch((error) => {\r\n        setErrorState({\r\n          error: true,\r\n          errorMessage: error.response.data.message,\r\n        });\r\n        setLoadingState({ isLoading: false, loadFailed: menuState.loadFailed });\r\n        console.log(error.response);\r\n      });\r\n  }, []);\r\n\r\n  // ORDER STATE\r\n\r\n  // Set order state conditionally - either to old order state or starting state\r\n\r\n  const [orderState, setOrderState] = useState({\r\n    totalPrice: props.location.state\r\n      ? props.location.state.order.totalPrice\r\n      : 5,\r\n    chosenToppings: props.location.state\r\n      ? props.location.state.order.chosenToppings\r\n      : [],\r\n  });\r\n\r\n  // EVENT HANDLERS - ADD TOPPING\r\n\r\n  const addToppingHandler = (id) => {\r\n    let order = { ...orderState };\r\n\r\n    // find the chosen topping in the menu\r\n    const menuIndex = menuState.toppings.findIndex(\r\n      (topping) => topping.id === id\r\n    );\r\n\r\n    // check if the topping has already been added to the orderToppings array\r\n    const orderIndex = order.chosenToppings.findIndex(\r\n      (topping) => topping.id === id\r\n    );\r\n\r\n    // if so, increase its count by 1\r\n    if (orderIndex > -1) {\r\n      order.chosenToppings[orderIndex].count++;\r\n    }\r\n    // otherwise (i.e. this topping is being added for the first time)\r\n    // create this topping and add it to the order toppings array\r\n    else {\r\n      // Save the id, name and price of the chosen topping; set its count to 1\r\n      const chosenTopping = {\r\n        id: menuState.toppings[menuIndex].id,\r\n        name: menuState.toppings[menuIndex].alt,\r\n        price: menuState.toppings[menuIndex].price,\r\n        count: 1,\r\n      };\r\n      order.chosenToppings.push(chosenTopping);\r\n    }\r\n\r\n    // Calculate the new price\r\n    const newPrice =\r\n      orderState.totalPrice + menuState.toppings[menuIndex].price;\r\n\r\n    // Update the order state with the new price and updated toppings array\r\n    setOrderState({\r\n      totalPrice: newPrice,\r\n      chosenToppings: order.chosenToppings,\r\n    });\r\n  };\r\n\r\n  // EVENT HANDLERS - REMOVE TOPPING\r\n\r\n  const removeToppingHandler = (id) => {\r\n    let order = { ...orderState };\r\n\r\n    // Find topping with matching id from the orderToppings\r\n    const index = order.chosenToppings.findIndex(\r\n      (topping) => topping.id === id\r\n    );\r\n\r\n    // Get the current price\r\n    let price = order.totalPrice;\r\n\r\n    // If topping was found, update the price and decrease the count\r\n    if (index >= 0) {\r\n      price = price - order.chosenToppings[index].price;\r\n      order.chosenToppings[index].count--;\r\n\r\n      // If the count is now 0, remove the topping completely\r\n      if (order.chosenToppings[index].count < 1) {\r\n        order.chosenToppings.splice(index, 1);\r\n      }\r\n    }\r\n\r\n    // Update order state with updated price and updated toppings array\r\n    setOrderState({\r\n      totalPrice: price,\r\n      chosenToppings: order.chosenToppings,\r\n    });\r\n  };\r\n\r\n  // EVENT HANDLERS - CHECK OUT\r\n\r\n  const checkoutHandler = () => {\r\n    props.history.push({\r\n      pathname: \"place-order\",\r\n      state: {\r\n        order: orderState,\r\n        menu: menuState.toppings,\r\n      },\r\n    });\r\n  };\r\n\r\n  // ERROR HANDLER\r\n\r\n  const errorHandler = () => {\r\n    setErrorState({\r\n      error: false,\r\n      errorMessage: null,\r\n    });\r\n    setLoadingState({\r\n      isLoading: false,\r\n      loadFailed: true,\r\n    });\r\n  };\r\n\r\n  // DISABLE CHECKOUT BUTTON IF NO TOPPINGS CHOSEN\r\n\r\n  let checkoutDisabled = true;\r\n\r\n  if (orderState.chosenToppings.length > 0) {\r\n    checkoutDisabled = false;\r\n  }\r\n\r\n  // DISPLAY PIZZA PAL MENU AND CONTROLS\r\n\r\n  let pizzapalMenu = errorState.error ? (\r\n    <ErrorModal error={errorState.errorMessage} onClear={errorHandler} />\r\n  ) : (\r\n    <Loader active={loadingState.isLoading} />\r\n  );\r\n\r\n  if (menuState.toppings.length > 0) {\r\n    pizzapalMenu = (\r\n      <Grid divided=\"vertically\" stackable>\r\n        <Grid.Row centered>\r\n          <Menu menu={menuState.toppings} />\r\n        </Grid.Row>\r\n        <Order\r\n          menu={menuState.toppings}\r\n          toppingAdded={addToppingHandler}\r\n          toppingRemoved={removeToppingHandler}\r\n          chosenToppings={orderState.chosenToppings}\r\n          totalPrice={orderState.totalPrice}\r\n          checkout={checkoutHandler}\r\n          disabled={checkoutDisabled}\r\n        />\r\n      </Grid>\r\n    );\r\n  } else if (loadingState.loadFailed) {\r\n    pizzapalMenu = (\r\n      <p>\r\n        We're having some issues loading the menu... Please try again later.\r\n      </p>\r\n    );\r\n  }\r\n\r\n  return <div>{pizzapalMenu}</div>;\r\n};\r\n\r\nexport default PizzaPal;\r\n"]},"metadata":{},"sourceType":"module"}