{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\wtmas\\\\Documents\\\\GitHub\\\\react-intro\\\\PizzaPal2\\\\frontend\\\\src\\\\containers\\\\Authenticate\\\\Authenticate.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useContext } from \"react\";\nimport { Grid, Form, Header, Segment, Button } from \"semantic-ui-react\";\nimport ErrorModal from \"../../components/Feedback/ErrorModal/ErrorModal\";\nimport AuthContext from \"../../context/auth-context\";\nimport axios from '../../axios-orders';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Authenticate = props => {\n  _s();\n\n  const auth = useContext(AuthContext);\n  const [isLoginMode, setIsLoginMode] = useState(false);\n  const [errorState, setErrorState] = useState({\n    error: false,\n    errorMessage: null\n  });\n\n  const switchModeHandler = () => {\n    setIsLoginMode(prevMode => !prevMode);\n    setAuthDetailsState({\n      details: {\n        name: \"\",\n        email: \"\",\n        password: \"\"\n      }\n    });\n    setValidationState({\n      rules: [{\n        id: \"form-input-name\",\n        message: \"Please enter your name (letters and spaces only, min length 2)\",\n        required: true,\n        valid: false\n      }, {\n        id: \"form-input-email\",\n        message: \"Please enter a valid email address (something@something.something)\",\n        required: true,\n        valid: false\n      }, {\n        id: \"form-input-password\",\n        message: \"Please enter a password (letters and numbers only, min length 6)\",\n        required: true,\n        valid: false\n      }],\n      formValid: false\n    });\n    document.getElementById(\"form\").reset();\n  };\n\n  const [authDetailsState, setAuthDetailsState] = useState({\n    details: {\n      name: \"\",\n      email: \"\",\n      password: \"\"\n    }\n  });\n  const [validationState, setValidationState] = useState({\n    rules: [{\n      id: \"form-input-name\",\n      message: \"Please enter your name (letters and spaces only, min length 2)\",\n      required: true,\n      valid: false\n    }, {\n      id: \"form-input-email\",\n      message: \"Please enter a valid email address (something@something.something)\",\n      required: true,\n      valid: false\n    }, {\n      id: \"form-input-password\",\n      message: \"Please enter a password (letters and numbers only, min length 6)\",\n      required: true,\n      valid: false\n    }],\n    formValid: false\n  });\n  const [messageState, setMessageState] = useState({\n    name: null,\n    email: null,\n    address: null\n  });\n\n  const validate = (value, inputIdentifier) => {\n    // copy the validation state\n    const validation = { ...validationState\n    }; // find the rule for this input\n\n    const inputRule = validation.rules.findIndex(input => input.id === inputIdentifier);\n    let message = null; // check if it is required and also empty\n\n    if (validation.rules[inputRule].required && value.trim() === \"\") {\n      // get the error message and set valid to false\n      message = validation.rules[inputRule].message;\n      validation.rules[inputRule].valid = false;\n    } else if (inputIdentifier === \"form-input-email\") {\n      //check for a valid email\n      let pattern = /^[^@\\s]+@[^@\\s]+\\.[^@\\s]+$/;\n      let validEmail = pattern.test(value);\n\n      if (validEmail) {\n        validation.rules[inputRule].valid = true;\n      } else {\n        validation.rules[inputRule].valid = false;\n        message = validation.rules[inputRule].message;\n      }\n    } else if (inputIdentifier === \"form-input-password\") {\n      //check for a valid password, letters and numbers only, 6 characters min\n      let pattern = /^[A-Za-z0-9\\s]{6,}$/;\n      let validPassword = pattern.test(value);\n\n      if (validPassword) {\n        validation.rules[inputRule].valid = true;\n      } else {\n        validation.rules[inputRule].valid = false;\n        message = validation.rules[inputRule].message;\n      }\n    } else if (validation.rules[inputRule].required && inputIdentifier === \"form-input-name\") {\n      //check for a valid name (letters and spaces only)\n      let pattern = /^[A-Za-z\\s]{2,30}$/;\n      let validName = pattern.test(value);\n\n      if (validName) {\n        validation.rules[inputRule].valid = true;\n      } else {\n        validation.rules[inputRule].valid = false;\n        message = validation.rules[inputRule].message;\n      }\n    } else {\n      // otherwise reset the message and set valid back to true\n      message = null;\n      validation.rules[inputRule].valid = true;\n    }\n\n    let msgState = { ...messageState\n    };\n\n    switch (inputIdentifier) {\n      case \"form-input-name\":\n        msgState.name = message;\n        break;\n\n      case \"form-input-email\":\n        msgState.email = message;\n        break;\n\n      case \"form-input-password\":\n        msgState.password = message;\n        break;\n\n      default: // code block\n\n    }\n\n    setMessageState({ ...msgState\n    }); // check if the whole form is valid\n\n    let formIsValid = true;\n\n    for (let i in validation.rules) {\n      if (isLoginMode && i == 0) {\n        continue;\n      }\n\n      if (!validation.rules[i].valid) {\n        formIsValid = false;\n      }\n    } // update state\n\n\n    setValidationState({\n      rules: validation.rules,\n      formValid: formIsValid\n    });\n  };\n\n  const formChangedHandler = (event, inputIdentifier) => {\n    let authDetails = authDetailsState.details;\n\n    switch (inputIdentifier) {\n      case \"form-input-name\":\n        authDetails.name = event.target.value;\n        validate(event.target.value, inputIdentifier);\n        break;\n\n      case \"form-input-email\":\n        authDetails.email = event.target.value;\n        validate(event.target.value, inputIdentifier);\n        break;\n\n      case \"form-input-password\":\n        let password = event.target.value;\n        let trimmedPassword = password.trim();\n        authDetails.password = trimmedPassword;\n        validate(trimmedPassword, inputIdentifier);\n        break;\n\n      default: // code block\n\n    }\n\n    setAuthDetailsState({\n      details: authDetails\n    });\n  };\n\n  const errorHandler = () => {\n    setErrorState({\n      error: false,\n      errorMessage: null\n    });\n  };\n\n  const signupHandler = () => {\n    axios.post(\"/signup\", authDetailsState.details).then(response => {\n      auth.login(response.data.userId, response.data.token);\n      props.history.push(\"/\");\n    }).catch(error => {\n      let errorMsg = \"\";\n\n      if (error.response) {\n        errorMsg = error.response.data.message;\n      } else {\n        errorMsg = \"Something went wrong - signup failed\";\n      }\n\n      setErrorState({\n        error: true,\n        errorMessage: errorMsg\n      });\n    });\n  };\n\n  const loginHandler = () => {\n    axios.post(\"/login\", authDetailsState.details).then(response => {\n      auth.login(response.data.userId, response.data.token);\n      props.history.push(\"/\");\n    }).catch(error => {\n      let errorMsg = \"\";\n\n      if (error.response) {\n        errorMsg = error.response.data.message;\n      } else {\n        errorMsg = \"Something went wrong - login failed\";\n      }\n\n      setErrorState({\n        error: true,\n        errorMessage: errorMsg\n      });\n    });\n  };\n\n  let disabled = !validationState.formValid;\n  let signupBtnColor = \"grey\";\n  let loginBtnColor = \"grey\";\n  let authForm = null;\n\n  if (errorState.error) {\n    authForm = /*#__PURE__*/_jsxDEV(ErrorModal, {\n      error: errorState.errorMessage,\n      onClear: errorHandler\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 271,\n      columnNumber: 7\n    }, this);\n  } else {\n    if (isLoginMode) {\n      authForm = /*#__PURE__*/_jsxDEV(Segment, {\n        color: \"red\",\n        children: [/*#__PURE__*/_jsxDEV(Header, {\n          as: \"h2\",\n          textAlign: \"center\",\n          color: \"red\",\n          children: \"Already registered? Log In!\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 277,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Form, {\n          id: \"form\",\n          children: [/*#__PURE__*/_jsxDEV(Form.Input, {\n            error: messageState.email,\n            autoComplete: \"off\",\n            required: true,\n            label: \"Email\",\n            placeholder: \"Email e.g. username@mail.com\",\n            id: \"form-input-email\",\n            onChange: event => formChangedHandler(event, \"form-input-email\")\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 281,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Form.Input, {\n            error: messageState.password,\n            type: \"password\",\n            autoComplete: \"off\",\n            required: true,\n            label: \"Password\",\n            placeholder: \"Password\",\n            id: \"form-input-password\",\n            onChange: event => formChangedHandler(event, \"form-input-password\")\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 292,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Button, {\n            type: \"submit\",\n            color: \"green\",\n            disabled: disabled,\n            onClick: loginHandler,\n            children: \"Log In\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 304,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 280,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 276,\n        columnNumber: 9\n      }, this);\n      loginBtnColor = \"red\";\n    } else {\n      authForm = /*#__PURE__*/_jsxDEV(Segment, {\n        color: \"red\",\n        children: [/*#__PURE__*/_jsxDEV(Header, {\n          as: \"h2\",\n          textAlign: \"center\",\n          color: \"red\",\n          children: \"First time here? Sign Up!\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 319,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Form, {\n          id: \"form\",\n          children: [/*#__PURE__*/_jsxDEV(Form.Input, {\n            error: messageState.email,\n            autoComplete: \"off\",\n            required: true,\n            label: \"Email\",\n            placeholder: \"Email e.g. username@mail.com\",\n            id: \"form-input-email\",\n            onChange: event => formChangedHandler(event, \"form-input-email\")\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 323,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Form.Input, {\n            error: messageState.password,\n            type: \"password\",\n            autoComplete: \"off\",\n            required: true,\n            label: \"Password\",\n            placeholder: \"Password\",\n            id: \"form-input-password\",\n            onChange: event => formChangedHandler(event, \"form-input-password\")\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 334,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Form.Input, {\n            error: messageState.name,\n            autoComplete: \"off\",\n            required: true,\n            label: \"Name\",\n            placeholder: \"Name\",\n            id: \"form-input-name\",\n            onChange: event => formChangedHandler(event, \"form-input-name\")\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 346,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Button, {\n            type: \"submit\",\n            color: \"green\",\n            disabled: disabled,\n            onClick: signupHandler,\n            children: \"Sign Up\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 355,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 322,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 318,\n        columnNumber: 9\n      }, this);\n      signupBtnColor = \"red\";\n    }\n  }\n\n  return /*#__PURE__*/_jsxDEV(Grid, {\n    children: /*#__PURE__*/_jsxDEV(Grid.Row, {\n      centered: true,\n      children: /*#__PURE__*/_jsxDEV(Grid.Column, {\n        width: 10,\n        children: [/*#__PURE__*/_jsxDEV(Button.Group, {\n          widths: \"2\",\n          children: [/*#__PURE__*/_jsxDEV(Button, {\n            size: \"large\",\n            color: signupBtnColor,\n            onClick: switchModeHandler,\n            children: \"Sign Up\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 375,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Button.Or, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 382,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Button, {\n            size: \"large\",\n            color: loginBtnColor,\n            onClick: switchModeHandler,\n            children: \"Log In\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 383,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 374,\n          columnNumber: 11\n        }, this), authForm]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 373,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 372,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 371,\n    columnNumber: 5\n  }, this);\n};\n\n_s(Authenticate, \"RjALv8Q6GBeWQ4cqdK8U1c+2gI0=\");\n\n_c = Authenticate;\nexport default Authenticate;\n\nvar _c;\n\n$RefreshReg$(_c, \"Authenticate\");","map":{"version":3,"sources":["C:/Users/wtmas/Documents/GitHub/react-intro/PizzaPal2/frontend/src/containers/Authenticate/Authenticate.js"],"names":["React","useState","useContext","Grid","Form","Header","Segment","Button","ErrorModal","AuthContext","axios","Authenticate","props","auth","isLoginMode","setIsLoginMode","errorState","setErrorState","error","errorMessage","switchModeHandler","prevMode","setAuthDetailsState","details","name","email","password","setValidationState","rules","id","message","required","valid","formValid","document","getElementById","reset","authDetailsState","validationState","messageState","setMessageState","address","validate","value","inputIdentifier","validation","inputRule","findIndex","input","trim","pattern","validEmail","test","validPassword","validName","msgState","formIsValid","i","formChangedHandler","event","authDetails","target","trimmedPassword","errorHandler","signupHandler","post","then","response","login","data","userId","token","history","push","catch","errorMsg","loginHandler","disabled","signupBtnColor","loginBtnColor","authForm"],"mappings":"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","sourcesContent":["import React, { useState, useContext } from \"react\";\r\nimport { Grid, Form, Header, Segment, Button } from \"semantic-ui-react\";\r\n\r\nimport ErrorModal from \"../../components/Feedback/ErrorModal/ErrorModal\";\r\nimport AuthContext from \"../../context/auth-context\";\r\nimport axios from '../../axios-orders';\r\n\r\nconst Authenticate = (props) => {\r\n\r\n  const auth = useContext(AuthContext);\r\n\r\n  const [isLoginMode, setIsLoginMode] = useState(false);\r\n\r\n  const [errorState, setErrorState] = useState({\r\n    error: false,\r\n    errorMessage: null,\r\n  });\r\n\r\n  const switchModeHandler = () => {\r\n    setIsLoginMode((prevMode) => !prevMode);\r\n    setAuthDetailsState({\r\n      details: {\r\n        name: \"\",\r\n        email: \"\",\r\n        password: \"\",\r\n      },\r\n    });\r\n    setValidationState({\r\n      rules: [\r\n        {\r\n          id: \"form-input-name\",\r\n          message:\r\n            \"Please enter your name (letters and spaces only, min length 2)\",\r\n          required: true,\r\n          valid: false,\r\n        },\r\n        {\r\n          id: \"form-input-email\",\r\n          message:\r\n            \"Please enter a valid email address (something@something.something)\",\r\n          required: true,\r\n          valid: false,\r\n        },\r\n        {\r\n          id: \"form-input-password\",\r\n          message:\r\n            \"Please enter a password (letters and numbers only, min length 6)\",\r\n          required: true,\r\n          valid: false,\r\n        },\r\n      ],\r\n      formValid: false,\r\n    });\r\n    document.getElementById(\"form\").reset();\r\n  };\r\n\r\n  const [authDetailsState, setAuthDetailsState] = useState({\r\n    details: {\r\n      name: \"\",\r\n      email: \"\",\r\n      password: \"\",\r\n    },\r\n  });\r\n\r\n  const [validationState, setValidationState] = useState({\r\n    rules: [\r\n      {\r\n        id: \"form-input-name\",\r\n        message:\r\n          \"Please enter your name (letters and spaces only, min length 2)\",\r\n        required: true,\r\n        valid: false,\r\n      },\r\n      {\r\n        id: \"form-input-email\",\r\n        message:\r\n          \"Please enter a valid email address (something@something.something)\",\r\n        required: true,\r\n        valid: false,\r\n      },\r\n      {\r\n        id: \"form-input-password\",\r\n        message:\r\n          \"Please enter a password (letters and numbers only, min length 6)\",\r\n        required: true,\r\n        valid: false,\r\n      },\r\n    ],\r\n    formValid: false,\r\n  });\r\n\r\n  const [messageState, setMessageState] = useState({\r\n    name: null,\r\n    email: null,\r\n    address: null,\r\n  });\r\n\r\n  const validate = (value, inputIdentifier) => {\r\n    // copy the validation state\r\n    const validation = { ...validationState };\r\n\r\n    // find the rule for this input\r\n    const inputRule = validation.rules.findIndex(\r\n      (input) => input.id === inputIdentifier\r\n    );\r\n\r\n    let message = null;\r\n\r\n    // check if it is required and also empty\r\n    if (validation.rules[inputRule].required && value.trim() === \"\") {\r\n      // get the error message and set valid to false\r\n      message = validation.rules[inputRule].message;\r\n      validation.rules[inputRule].valid = false;\r\n    } else if (inputIdentifier === \"form-input-email\") {\r\n      //check for a valid email\r\n\r\n      let pattern = /^[^@\\s]+@[^@\\s]+\\.[^@\\s]+$/;\r\n      let validEmail = pattern.test(value);\r\n\r\n      if (validEmail) {\r\n        validation.rules[inputRule].valid = true;\r\n      } else {\r\n        validation.rules[inputRule].valid = false;\r\n        message = validation.rules[inputRule].message;\r\n      }\r\n    } else if (inputIdentifier === \"form-input-password\") {\r\n      //check for a valid password, letters and numbers only, 6 characters min\r\n\r\n      let pattern = /^[A-Za-z0-9\\s]{6,}$/;\r\n      let validPassword = pattern.test(value);\r\n\r\n      if (validPassword) {\r\n        validation.rules[inputRule].valid = true;\r\n      } else {\r\n        validation.rules[inputRule].valid = false;\r\n        message = validation.rules[inputRule].message;\r\n      }\r\n    } else if (\r\n      validation.rules[inputRule].required &&\r\n      inputIdentifier === \"form-input-name\"\r\n    ) {\r\n      //check for a valid name (letters and spaces only)\r\n\r\n      let pattern = /^[A-Za-z\\s]{2,30}$/;\r\n      let validName = pattern.test(value);\r\n\r\n      if (validName) {\r\n        validation.rules[inputRule].valid = true;\r\n      } else {\r\n        validation.rules[inputRule].valid = false;\r\n        message = validation.rules[inputRule].message;\r\n      }\r\n    } else {\r\n      // otherwise reset the message and set valid back to true\r\n      message = null;\r\n      validation.rules[inputRule].valid = true;\r\n    }\r\n\r\n    let msgState = { ...messageState };\r\n\r\n    switch (inputIdentifier) {\r\n      case \"form-input-name\":\r\n        msgState.name = message;\r\n        break;\r\n      case \"form-input-email\":\r\n        msgState.email = message;\r\n        break;\r\n      case \"form-input-password\":\r\n        msgState.password = message;\r\n        break;\r\n      default:\r\n      // code block\r\n    }\r\n\r\n    setMessageState({ ...msgState });\r\n\r\n    // check if the whole form is valid\r\n    let formIsValid = true;\r\n\r\n    for (let i in validation.rules) {\r\n      if (isLoginMode && i == 0) {\r\n        continue;\r\n      }\r\n\r\n      if (!validation.rules[i].valid) {\r\n        formIsValid = false;\r\n      }\r\n    }\r\n\r\n    // update state\r\n    setValidationState({ rules: validation.rules, formValid: formIsValid });\r\n  };\r\n\r\n  const formChangedHandler = (event, inputIdentifier) => {\r\n    let authDetails = authDetailsState.details;\r\n\r\n    switch (inputIdentifier) {\r\n      case \"form-input-name\":\r\n        authDetails.name = event.target.value;\r\n        validate(event.target.value, inputIdentifier);\r\n        break;\r\n      case \"form-input-email\":\r\n        authDetails.email = event.target.value;\r\n        validate(event.target.value, inputIdentifier);\r\n        break;\r\n      case \"form-input-password\":\r\n        let password = event.target.value;\r\n        let trimmedPassword = password.trim();\r\n        authDetails.password = trimmedPassword;\r\n        validate(trimmedPassword, inputIdentifier);\r\n        break;\r\n      default:\r\n      // code block\r\n    }\r\n\r\n    setAuthDetailsState({ details: authDetails });\r\n  };\r\n\r\n  const errorHandler = () => {\r\n    setErrorState({\r\n      error: false,\r\n      errorMessage: null,\r\n    });\r\n  };\r\n\r\n  const signupHandler = () => {\r\n    axios\r\n      .post(\"/signup\", authDetailsState.details)\r\n      .then((response) => {\r\n        auth.login(response.data.userId, response.data.token);\r\n        props.history.push(\"/\");\r\n      })\r\n      .catch((error) => {\r\n        let errorMsg = \"\";\r\n        if (error.response) {\r\n          errorMsg = error.response.data.message;\r\n        } else {\r\n          errorMsg = \"Something went wrong - signup failed\";\r\n        }\r\n        setErrorState({ error: true, errorMessage: errorMsg });\r\n      });\r\n  };\r\n\r\n  const loginHandler = () => {\r\n    axios\r\n      .post(\"/login\", authDetailsState.details)\r\n      .then((response) => {\r\n        auth.login(response.data.userId, response.data.token);\r\n        props.history.push(\"/\");\r\n      })\r\n      .catch((error) => {\r\n        let errorMsg = \"\";\r\n        if (error.response) {\r\n          errorMsg = error.response.data.message;\r\n        } else {\r\n          errorMsg = \"Something went wrong - login failed\";\r\n        }\r\n        setErrorState({ error: true, errorMessage: errorMsg });\r\n      });\r\n  };\r\n\r\n  let disabled = !validationState.formValid;\r\n\r\n  let signupBtnColor = \"grey\";\r\n  let loginBtnColor = \"grey\";\r\n\r\n  let authForm = null;\r\n\r\n  if (errorState.error) {\r\n    authForm = (\r\n      <ErrorModal error={errorState.errorMessage} onClear={errorHandler} />\r\n    );\r\n  } else {\r\n    if (isLoginMode) {\r\n      authForm = (\r\n        <Segment color=\"red\">\r\n          <Header as=\"h2\" textAlign=\"center\" color=\"red\">\r\n            Already registered? Log In!\r\n          </Header>\r\n          <Form id=\"form\">\r\n            <Form.Input\r\n              error={messageState.email}\r\n              autoComplete=\"off\"\r\n              required\r\n              label=\"Email\"\r\n              placeholder=\"Email e.g. username@mail.com\"\r\n              id=\"form-input-email\"\r\n              onChange={(event) =>\r\n                formChangedHandler(event, \"form-input-email\")\r\n              }\r\n            />\r\n            <Form.Input\r\n              error={messageState.password}\r\n              type=\"password\"\r\n              autoComplete=\"off\"\r\n              required\r\n              label=\"Password\"\r\n              placeholder=\"Password\"\r\n              id=\"form-input-password\"\r\n              onChange={(event) =>\r\n                formChangedHandler(event, \"form-input-password\")\r\n              }\r\n            />\r\n            <Button\r\n              type=\"submit\"\r\n              color=\"green\"\r\n              disabled={disabled}\r\n              onClick={loginHandler}\r\n            >\r\n              Log In\r\n            </Button>\r\n          </Form>\r\n        </Segment>\r\n      );\r\n      loginBtnColor = \"red\";\r\n    } else {\r\n      authForm = (\r\n        <Segment color=\"red\">\r\n          <Header as=\"h2\" textAlign=\"center\" color=\"red\">\r\n            First time here? Sign Up!\r\n          </Header>\r\n          <Form id=\"form\">\r\n            <Form.Input\r\n              error={messageState.email}\r\n              autoComplete=\"off\"\r\n              required\r\n              label=\"Email\"\r\n              placeholder=\"Email e.g. username@mail.com\"\r\n              id=\"form-input-email\"\r\n              onChange={(event) =>\r\n                formChangedHandler(event, \"form-input-email\")\r\n              }\r\n            />\r\n            <Form.Input\r\n              error={messageState.password}\r\n              type=\"password\"\r\n              autoComplete=\"off\"\r\n              required\r\n              label=\"Password\"\r\n              placeholder=\"Password\"\r\n              id=\"form-input-password\"\r\n              onChange={(event) =>\r\n                formChangedHandler(event, \"form-input-password\")\r\n              }\r\n            />\r\n            <Form.Input\r\n              error={messageState.name}\r\n              autoComplete=\"off\"\r\n              required\r\n              label=\"Name\"\r\n              placeholder=\"Name\"\r\n              id=\"form-input-name\"\r\n              onChange={(event) => formChangedHandler(event, \"form-input-name\")}\r\n            />\r\n            <Button\r\n              type=\"submit\"\r\n              color=\"green\"\r\n              disabled={disabled}\r\n              onClick={signupHandler}\r\n            >\r\n              Sign Up\r\n            </Button>\r\n          </Form>\r\n        </Segment>\r\n      );\r\n      signupBtnColor = \"red\";\r\n    }\r\n  }\r\n\r\n  return (\r\n    <Grid>\r\n      <Grid.Row centered>\r\n        <Grid.Column width={10}>\r\n          <Button.Group widths=\"2\">\r\n            <Button\r\n              size=\"large\"\r\n              color={signupBtnColor}\r\n              onClick={switchModeHandler}\r\n            >\r\n              Sign Up\r\n            </Button>\r\n            <Button.Or />\r\n            <Button\r\n              size=\"large\"\r\n              color={loginBtnColor}\r\n              onClick={switchModeHandler}\r\n            >\r\n              Log In\r\n            </Button>\r\n          </Button.Group>\r\n          {authForm}\r\n        </Grid.Column>\r\n      </Grid.Row>\r\n    </Grid>\r\n  );\r\n};\r\n\r\nexport default Authenticate;\r\n"]},"metadata":{},"sourceType":"module"}